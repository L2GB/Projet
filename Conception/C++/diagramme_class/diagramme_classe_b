@startuml

hide circle

class Transmitter
class Object
class ObjectManager
class PowerPlug
class Heater
class Thermostat
class ZWaveController
class BDCC
class RACC
class Socket

abstract class DataObserver
abstract class DataObservable

class Room{

}


abstract class Object{
	-struct tm *m_time
	-Week *m_planning
	-string m_type
	-ZWaveController *m_zwaveController
	-int m_deviceId
	-int m_instanceNum
	-bool m_connected
	-bool m_unknown
	string m_name
	+{abstract}void print()
	+{abstract}json_t *json_transform_object()
	+{abstract}void run()
}

class ObjectManager{
	+Object *getObject(string _name)
	+void notifyObjectChanges(Object *_object)
	+void mode_inclusion()
	+void powerPlug_switchON(int _deviceId, int _instanceNum)
	+void powerPlug_switchOFF(int _deviceId, int _instanceNum)
	-void initializeMapping()
	-map<string, TypeObjet> m_typeObjet
	-vector<Object *> m_objects
	-vector<Room *> m_rooms
	-PlanningManager m_planningManager
	-ZWaveController m_zwaveController
}

class Heater{
	-Heater_state m_state
	-int m_currentTemp
	-bool m_allume
	-int m_Tconfort
	-int m_Teco
	+void print()
	+json_t *json_transform_object()
	-void getCurrentTemp()
	-void run()
	-void init()
}	

class Thermostat{
}

class PowerPlug{
	-PowerPlug_level m_level
	-PowerPlug_state m_state
	+bool getLevel()
	+void switchON()
	+void switchOFF()
	+void print()
	+json_t *json_transform_object()
	-void run()
	-void init()
	-void checkTime()
	-PowerPlug_level getScheduledLevel()
}

class RACC{
	+void receiveOrder(string _dataReceive, IdClient _idClient)
	+void sendData(string _data)
}

class Transmitter{
	+void executeOrder(string _order, json_t *data, IdClient _idClient)
	-string createMessage(string _order, json_t *_data, string _message)
	-void initializeMapping()
	-void loadData()
	-map<string, Type> m_type
	-ObjectManager m_objectManager
	-PlanningManager m_planningManager
	-RACC m_racc
}

abstract class Communicator{
	+void attach(Transmission *_transmission)
}

abstract class Transmission{
	+{abstract} void executeOrder(string _order, json_t *data, IdClient _idClient)
}

class LocalFileManager{
		+{static} string getDays()
		+{static} string getWeeks()
		+{static} string getObjects()
		+{static} string getRooms()
		+{static} void setDay(json_t *_day)
		+{static} void setWeek(json_t *_week)
		+{static} void setObject(json_t *_object)
		+{static} void setRoom(json_t *_room)
		+{static} void rmDay(json_t *_day)
		+{static} void rmWeek(json_t *_week)
		+{static} void rmObject(json_t *_object)
		+{static} void rmRoom(json_t *_room)
}

class PlanningManager{
	-vector<Week> m_weeks
	-vector<Day> m_days
	
	+void day_set(string _name, vector<TimeSlot> _timeSlot)
	+Day *day_get(string _name)
	+void day_del(string _name)
	+void week_set(string _name, vector<Day> _days)
	+Day *week_get(string _name)
	+void week_del(string _name)
}


class Week{
	-string m_name
	-vector<Day *> m_days
	+void setDays(vector<Day*> _days)
}

class Day{
	-string m_name
	-vector<TimeSlot> m_timeSlot
	+vector<TimeSlot> getTimeSlot()
}

class TimeSlot{
	-bool m_permission
	-struct tm m_start
	-struct tm m_end
}

Object -right-> ZWaveController
ObjectManager -up-> Object
ObjectManager --> ZWaveController

Heater -up-|> Object
PowerPlug -up-|> Object
Thermostat -up-|> Object



Transmitter -up-|> Transmission
Communicator -right-> Transmission

BDCC-up-|>Communicator
RACC-up-|>Communicator
ObjectManager -up-|> Communicator

Transmitter -left-> BDCC
Transmitter --> RACC
Transmitter --> ObjectManager
Transmitter --> LocalFileManager

RACC--|>DataObserver
RACC-->Socket
Socket--|>DataObservable
DataObservable-right->DataObserver

ObjectManager --> PlanningManager
PlanningManager "1" -down- "*" Week
PlanningManager "1" -down- "*" Day
PlanningManager "1" -down- "*" TimeSlot
Week "1" -left- "7" Day
Day "1" -left- "*" TimeSlot

Room -up-> Object
ObjectManager -left-> Room

@enduml
