@startuml

hide circle

class Transmitter
class Object
class ObjectManager
class PowerPlug
class Heater
class Thermostat
class OCC
class ZWaveController
class BDCC
class RACC
class Socket

abstract class DataObserver
abstract class DataObservable

abstract class Object{
	void run()
	abstract readFile()
	abstract writeFile()
}

class ObjectManager{
	void stop()
}

class Heater{
	readFile()
}	

class Thermostat{
	readFile()
}

class PowerPlug{
	readFile()
}

class RACC{
	+void receiveOrder(string _dataReceive, IdClient _idClient)
	+void sendData(string _data)
}

class Transmitter{
	+void executeOrder(string _order, json_t *data, IdClient _idClient)
	-void initializeMapping()
	-string createMessage(string _order, json_t *_data, string _message)
}

abstract class Communicator{
	+void attach(Transmission *_transmission)
}

abstract class Transmission{
	+{abstract} void executeOrder(string _order, json_t *data, IdClient _idClient)
}

class LocalFileManager{
		+{static} string getDays()
		+{static} string getWeeks()
		+{static} string getObjects()
		+{static} string getRooms()
		+{static} void setDay(json_t *_day)
		+{static} void setWeek(json_t *_week)
		+{static} void setObject(json_t *_object)
		+{static} void setRoom(json_t *_room)
		+{static} void rmDay(json_t *_day)
		+{static} void rmWeek(json_t *_week)
		+{static} void rmObject(json_t *_object)
		+{static} void rmRoom(json_t *_room)
}

ObjectManager -->OCC
OCC-->ZWaveController
ObjectManager-up->Object

Object-up-|>Heater
Object-up-|>PowerPlug
Object-up-|>Thermostat



Transmitter -up-|> Transmission
Communicator -right-> Transmission

BDCC-up-|>Communicator
RACC-up-|>Communicator
ObjectManager -up-|> Communicator

Transmitter -left-> BDCC
Transmitter --> RACC
Transmitter --> ObjectManager
Transmitter --> LocalFileManager

RACC--|>DataObserver
RACC-->Socket
Socket--|>DataObservable
DataObservable-right->DataObserver


@enduml


